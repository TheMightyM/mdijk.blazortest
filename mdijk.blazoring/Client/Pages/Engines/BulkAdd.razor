@page "/Engines/BulkAdd"
@using mdijk.blazoring.Shared.Models
@using mdijk.blazoring.Shared.Response

@using mdijk.blazoring.Client.Pages.Engines.Shared

@inject EngineClient EngineClient
@inject NavigationManager NavigationManager


@if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger" role="alert">
        @error
    </div>
}

@if (!selectionMade)
{
    <div>
        <label>How many engines do you want to add?</label>
        <input @onchange="onNumberChanged" placeholder="We have the best numbers!"  class="form-control"/>
    </div>
}
else
{
    <EditForm model="@engines" OnValidSubmit="HandleSubmit">
        <div>
            <table>
                <tr>
                    <th>Engine name</th>
                    <th>Country</th>
                </tr>
                @foreach (var engine in engines)
                {
                    <EngineRow engine="@engine" />
                }
            </table>
        </div>
        <div class="form-group row">
            <div class="col-sm-10">
                <button type="submit" class="btn btn-primary @buttonExtraClass">Add Engines</button>
            </div>
        </div>
    </EditForm>
}


@code{
    #region Parameters
    [Parameter]
    public int NumberToAdd { get; set; }
    #endregion

    private bool pressed = false;
    private string buttonExtraClass = "";
    public string error = "";
    private string spinnerclass = "kt-spinner kt-spinner--right kt-spinner--md kt-spinner--light";


    public bool selectionMade = false;
    public Engine[] engines = null;

    protected override async Task OnInitializedAsync()
    {
        await Task.FromResult<bool>(true);

    }

    public EventCallback<int> NumberChanged { get; set; }

    private Task onNumberChanged(ChangeEventArgs e)
    {
        error = null;
        NumberToAdd = Convert.ToInt32(e.Value.ToString());
        try
        {

            engines = new Engine[NumberToAdd];
            for (int i = 0; i < NumberToAdd; i++)
            {
                engines[i] = new Engine();
            }

            selectionMade = true;
        }

        catch (Exception ex)
        {
            error = ex.Message;
        }

        return NumberChanged.InvokeAsync(NumberToAdd);
    }

    private async Task HandleSubmit()
    {

        if (pressed) return;
        var builder = new System.Text.StringBuilder();
        pressed = true;
        buttonExtraClass = spinnerclass;
        for (int i = 0; i < NumberToAdd; i++)
        {
            var rObj = await EngineClient.AddEngineAsync(engines[i]);

            if (rObj.IsError)
            {
                builder.AppendLine(rObj.Message);
            }
        }

        error = builder.ToString();

        if (string.IsNullOrEmpty(error))
        {
            error = "All have been added!";
        }

        buttonExtraClass = "";
        pressed = false;

    }

}