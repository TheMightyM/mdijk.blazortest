@using mdijk.blazoring.Shared.Models
@using mdijk.blazoring.Shared.Models.SeasonResults
@using mdijk.blazoring.Client.Pages.Teams.Shared
@using mdijk.blazoring.Shared;

<Portlet>
    <PortletHead>Points per engine</PortletHead>
    <PortletBody>
        @if (loading)
        {
            <table>
                <LoadingThreeColumns />
            </table>
        }
        else
        {
            <div class="kt-section">
                <div class="kt-section__content">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Driver</th>
                                <th>Points</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                int engineCounter = 1;
                            }
                            @foreach (var enginePoint in enginePoints.OrderByDescending(x => x.Value))
                            {
                                <tr>
                                    <td>@(engineCounter++)</td>
                                    <td>@engineRef[enginePoint.Key].EngineName</td>
                                    <td>@enginePoint.Value</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </PortletBody>
</Portlet>

@code {

    [Parameter]
    public SeasonResultsModel SeasonResults { get; set; }
    private IDictionary<int, Engine> engineRef;
    private IDictionary<int, int> enginePoints;


    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        await Task.FromResult(true);
        ProcessSeasonResults();

        loading = false;
    }

    private void ProcessSeasonResults()
    {
        engineRef = new Dictionary<int, Engine>();
        enginePoints = new Dictionary<int, int>();


        foreach (var rE in SeasonResults.RaceEvents)
        {
            foreach (var result in rE.Results)
            {
                if (!engineRef.ContainsKey(result.DriverEntry.EntryEngine.EngineId))
                {
                    engineRef.Add(result.DriverEntry.EntryEngine.EngineId, result.DriverEntry.EntryEngine);
                    enginePoints.Add(result.DriverEntry.EntryEngine.EngineId, 0);
                }


                var points = 0;
                if (Points.PointsForPosition.ContainsKey(result.FinishingPosition))
                {
                    points = Points.PointsForPosition[result.FinishingPosition];
                    if (result.FastestLap && Points.IsFastestLap(result.FinishingPosition))
                    {
                        points += Points.FastedLap;
                    }
                }

                enginePoints[result.DriverEntry.EntryEngine.EngineId] += points;

            }
        }
    }


}
